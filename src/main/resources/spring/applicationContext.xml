<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
  http://www.springframework.org/schema/aop 
  http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
  http://www.springframework.org/schema/context 
  http://www.springframework.org/schema/context/spring-context-3.2.xsd
  http://www.springframework.org/schema/tx 
  http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <description>Spring公共配置文件</description>
    <!-- 开启spring注解驱动 -->
    <!-- <context:component-scan>注解内部就开启了spring注解驱动，故可以不用再写以下配置 -->
    <!--<context:annotation-config/>-->

    <context:property-placeholder
            ignore-resource-not-found="true" location="classpath:prop/jdbc.properties"/>

    <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
    <context:component-scan base-package="com">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- beecell_weixin_card 数据库配置连接开始 -->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:spring/spring-mybatis.xml"/>
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.kerwin.spring.mycrm.permision.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
        <constructor-arg index="1" value="REUSE"/>
    </bean>

    <!--&lt;!&ndash; 事务管理器配置, 使用jdbc事务 &ndash;&gt;-->
    <!--<bean id="transactionManager"-->
          <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 使用annotation定义事务 &ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"-->
                          <!--proxy-target-class="true"/>-->

    <!--&lt;!&ndash; spring declarative transaction management &ndash;&gt;-->
    <!--<aop:config>-->
        <!--<aop:pointcut id="fooServiceMethods" expression="execution(* com.kerwin.spring.mycrm.permision.service.impl..*.*(..))"/>-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceMethods"/>-->
    <!--</aop:config>-->

    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="find*" read-only="true" propagation="REQUIRED"/>-->
            <!--<tx:method name="create*" rollback-for="Exception" propagation="REQUIRED"/>-->
            <!--<tx:method name="save*" rollback-for="Exception" propagation="REQUIRED"/>-->
            <!--<tx:method name="insert*" rollback-for="Exception" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" rollback-for="Exception" propagation="REQUIRED"/>-->
            <!--<tx:method name="delete*" rollback-for="Exception" propagation="REQUIRED"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.mysql.url}"/>
        <property name="username" value="${jdbc.mysql.username}"/>
        <property name="password" value="${jdbc.mysql.password}"/>

        <!-- Connection Pooling Info -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="minIdle" value="3"/>
        <property name="maxWait" value="60000"/>
        <property name="defaultAutoCommit" value="false"/>
        <!-- 连接Idle一个小时后超时 -->
        <property name="timeBetweenEvictionRunsMillis" value="3600000"/>
        <property name="minEvictableIdleTimeMillis" value="3600000"/>
        <!-- DataSource Druid配置 -->
        <property name="validationQuery" value="SELECT SYSDATE() FROM DUAL"/>
        <property name="testWhileIdle" value="true"/>
        <property name="poolPreparedStatements" value="true"/><!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
        <property name="filters" value="stat,config"/><!-- 开启druid监控支持(stat)，SQL防火墙(wall)以及SQL合并(mergeStat) -->
        <property name="connectionProperties"
                  value="druid.stat.slowSqlMillis=2000;config.decrypt=false"/><!-- 慢SQL标准 -->
        <property name="removeAbandoned" value="true"/> <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="1800"/> <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="true"/> <!-- 关闭abanded连接时输出错误日志 -->
    </bean>
    <!-- druid stat -->
    <bean class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="3000"/>
        <property name="logSlowSql" value="true"/>
        <property name="mergeSql" value="true"/>
    </bean>

    <bean class="com.alibaba.druid.wall.WallFilter">
        <property name="dbType" value="mysql"/>
    </bean>

    <!--&lt;!&ndash; Druid AOP配置 &ndash;&gt;-->
    <!--<bean id="druid-stat-interceptor"-->
          <!--class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->
    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"-->
          <!--scope="prototype">-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--<value>com.dao.base.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 打开监控 &ndash;&gt;-->
    <!--<aop:config>-->
        <!--<aop:advisor advice-ref="druid-stat-interceptor"-->
                     <!--pointcut-ref="druid-stat-pointcut"/>-->
    <!--</aop:config>-->
    <!--&lt;!&ndash; 打开面向切面工具 &ndash;&gt;-->
    <!--<aop:aspectj-autoproxy/>-->
</beans>